#!/bin/bash
### BEGIN INIT INFO
# Provides:          <%= @name %>
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      S 0 1 6
# Short-Description: <%= @short_description %>
# Description:       <%= @description %>
### END INIT INFO

# Do NOT "set -e"

<% require 'shellwords' %>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/usr/sbin:/usr/bin:/sbin:/bin
DESC=<%= @description.shellescape %>
NAME=<%= @name %>
DAEMON=<%= @command[0].shellescape %>
PIDFILE="/var/run/$NAME/$NAME.pid"
DAEMON_ARGS=( <%= @command[1..-1].shelljoin %> )
SCRIPTNAME="/etc/init.d/$NAME"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r "/etc/default/$NAME" ] && . "/etc/default/$NAME"

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function to create run directory
#
mkrundir() {
    [ ! -d /var/run/<%= @name %> ] && mkdir -p /var/run/<%= @name %>
<% unless @user.nil? -%>
    chown <%= @user.shellescape %> /var/run/<%= @name %>
<% end -%>
}

#
# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    echo "Starting $NAME and backgrounding"
    mkrundir
<% @ulimit.each do |k, v| -%>
    ulimit -H -<%= @ulimit_switches[k] %> <%= v %>
    ulimit -S -<%= @ulimit_switches[k] %> <%= v %>
<% end -%>
<% @before_command.each do |c| -%>
    <%= c.shelljoin %>
<% end -%>
    start-stop-daemon --start --quiet --pidfile "$PIDFILE" --exec "$DAEMON" \
      <% unless @user.nil? %>--chuid <%= @user.shellescape %><% end %> --background \
      --make-pidfile --test > /dev/null \
        || return 1
    start-stop-daemon --start --quiet --pidfile "$PIDFILE" --exec "$DAEMON" \
      <% unless @user.nil? %>--chuid <%= @user.shellescape %><% end %> --background \
      --make-pidfile -- "${DAEMON_ARGS[@]}" \
        || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile "$PIDFILE" --name "$DAEMON"
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    # Wait for children to finish too if this is a daemon that forks
    # and if the daemon is only ever run from this initscript.
    # If the above conditions are not satisfied then add some other code
    # that waits for the process to drop all resources that could be
    # needed by services started subsequently.  A last resort is to
    # sleep for some time.
    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec "$DAEMON"
    [ "$?" = 2 ] && return 2
    # Many daemons don't delete their pidfiles when they exit.
    rm -f "$PIDFILE"
    return "$RETVAL"
}


<% if @has_reload -%>
#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
    #
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    #
    <% if @reload_command -%>
        <% @reload_command.shelljoin %>
    <% else -%>
        start-stop-daemon --stop --signal 1 --quiet --pidfile "$PIDFILE" --name "$DAEMON"
    <% end -%>
    return 0
}
<% end -%>

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
<% if @has_reload -%>
  reload|force-reload)

     If do_reload() is not implemented then leave this commented out
     and leave 'force-reload' as an alias for 'restart'.

    log_daemon_msg "Reloading $DESC" "$NAME"
    do_reload
    log_end_msg $?
    ;;
  restart)
<% else -%>
  restart|force-reload)
<% end -%>
    #
    # If the "reload" option is implemented then remove the
    # 'force-reload' alias
    #
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;; # Old process is still running
            *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  status)
      status_of_proc -p "$PIDFILE" "$DAEMON" "$NAME" && exit 0 || exit $?
      ;;
  *)
<% if @has_reload -%>
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload|force-reload}" >&2
<% else -%>
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
<% end -%>
    exit 3
    ;;
esac

:
