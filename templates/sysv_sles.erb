#!/bin/bash
#
#       /etc/rc.d/init.d/<%= @name %>
#
#       <%= @description %>
#
### BEGIN INIT INFO
# Provides:          <%= @name %>
# Required-Start:    network
# Should-Start:      $null
# Required-Stop:     $null
# Should-Stop:	     $null
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: <%= @short_description %>
# Description:       <%= @description %>
### END INIT INFO

. /etc/rc.status

rc_reset

<% require 'shellwords' %>

[ -e /etc/sysconfig/<%= @name.shellescape %> ] && . /etc/sysconfig/<%= @name.shellescape %>

export GOMAXPROCS="${GOMAXPROCS:-2}"


case "$1" in
    start)
        echo -n "Starting "<%= @name.shellescape %>
<% @ulimit.each do |k, v| -%>
        ulimit -H -<%= @ulimit_switches[k] %> <%= v %>
        ulimit -S -<%= @ulimit_switches[k] %> <%= v %>
<% end -%>
<% @before_command.each do |c| -%>
        <%= c.shelljoin %>
<% end -%>
        ## Start daemon with startproc(8). If this fails
        ## the return value is set appropriately by startproc.
        startproc <%= @command.shelljoin %>

        # Remember status and be verbose
        rc_status -v
        ;;
    stop)
        echo -n "Stopping "<%= @name.shellescape %>": "
        ## Stop daemon with killproc(8) and if this fails
        ## killproc sets the return value according to LSB.

        killproc -TERM <%= @command[0].shellescape %>

        # Remember status and be verbose
        rc_status -v
        ;;
    restart)
        ## Stop the service and regardless of whether it was
        ## running or not, start it again.
        "$0" stop
        "$0" start

        # Remember status and be quiet
        rc_status
        ;;
    reload)
        # If it supports signaling:
        echo -n "Reload service "<%= @name.shellescape %>
        killproc -HUP <%= @command[0].shellescape %>
        rc_status -v

        ## Otherwise if it does not support reload:
        #rc_failed 3
        #rc_status -v
        ;;
    status)
        echo -n "Checking for service "<%= @name.shellescape %>
        ## Check status with checkproc(8), if process is running
        ## checkproc will return with exit status 0.

        # Return value is slightly different for the status command:
        # 0 - service up and running
        # 1 - service dead, but /var/run/  pid  file exists
        # 2 - service dead, but /var/lock/ lock file exists
        # 3 - service not running (unused)
        # 4 - service status unknown :-(
        # 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)

        # NOTE: checkproc returns LSB compliant status values.
        checkproc <%= @command[0].shellescape %>
        # NOTE: rc_status knows that we called this init script with
        # "status" option and adapts its messages accordingly.
        rc_status -v
        ;;
    *)
        ## If no parameters are given, print which are avaiable.
        echo "Usage: $0 {start|stop|status|restart|reload}"
        exit 1
        ;;
esac

rc_exit
